ARG BASE_IMAGE
ARG OS_ARCH

#
#  Base Stage
#
FROM --platform=linux/${OS_ARCH} ${BASE_IMAGE} AS trellis-base

ARG ROS_DISTRO
ENV ROS_DISTRO=${ROS_DISTRO}

ENV HOME=/root
ENV TRELLIS_WS=$HOME/trellis_ws
ENV DEBIAN_FRONTEND=noninteractive

# Install required packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    tree \
    vim \
    git \
    wget \
    curl \
    gnupg2 \
    lsb-release \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

SHELL ["/bin/bash", "-c"]

WORKDIR $TRELLIS_WS

RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    tree \
    python3-venv \
    python3-full \
    python3-dev \
    # Other
    git \
    wget \
    flex \
    bison \
    gperf \
    build-essential \
    cmake \
    ninja-build \
    ccache \
    libffi-dev \
    libssl-dev \
    libglm-dev \
    && rm -rf /var/lib/apt/lists/*

# venv generated by setup.sh
ENV TRELLIS_VENV=/opt/trellis_venv

# Create a virtual environment with access to system packages
RUN python3 -m venv --system-site-packages ${TRELLIS_VENV}

# Set Conda in the PATH
ENV PATH="$TRELLIS_VENV/bin:$PATH"

# Clone additional repos (trellis proper)
RUN mkdir -p /opt/src
WORKDIR /opt
RUN git clone --recurse-submodules --branch develop --single-branch https://github.com/jonbonne/TRELLIS.git
# build/install trellis
RUN cd TRELLIS \
    && source ${TRELLIS_VENV}/bin/activate \
    && ./setup.sh --basic --xformers --flash-attn --diffoctreerast --spconv --mipgaussian --kaolin --nvdiffrast --demo
WORKDIR $TRELLIS_WS 

# install nvdiffrast
WORKDIR /opt
RUN git clone https://github.com/NVlabs/nvdiffrast.git \
    && cd nvdiffrast && ${TRELLIS_VENV}/bin/pip install .
WORKDIR $TRELLIS_WS

RUN ${TRELLIS_VENV}/bin/python --version
RUN ${TRELLIS_VENV}/bin/pip install --upgrade \
        pip \
        setuptools \
        wheel \
        pccm \
        torch \
        torchvision \
        --extra-index-url https://download.pytorch.org/whl/cu121 \
        pygame \
        numpy==2.0 \
        matplotlib \
        scipy \
        psutil

# install spconv
#WORKDIR /opt
#RUN git clone https://github.com/traveller59/spconv.git \
#    && cd spconv && git submodule update --init --recursive \
#    && ${TRELLIS_VENV}/bin/python setup.py bdist_wheel \
#    && ${TRELLIS_VENV}/bin/pip install dist/spconv-*.whl
#WORKDIR $TRELLIS_WS

# install spconv
WORKDIR /opt
ENV TORCH_CUDA_ARCH_LIST="8.9"
RUN git clone https://github.com/graphdeco-inria/diff-gaussian-rasterization.git \
    && cd diff-gaussian-rasterization \ 
    && ${TRELLIS_VENV}/bin/pip install .
WORKDIR $TRELLIS_WS

RUN ${TRELLIS_VENV}/bin/pip install --upgrade \
        flash-attn \
        spconv-cu120 \
        xformers \
        git+https://github.com/NVIDIAGameWorks/kaolin

# Set the virtual environment as the default Python environment
ENV PATH="${TRELLIS_VENV}/bin:$PATH"

#
#  ros-base Stage
#
FROM trellis-base AS ros-base

# Add ROS 2 GPG Key and Repository
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - && \
    sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2.list'

# Install required packages
RUN source ${TRELLIS_VENV}/bin/activate && apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    python3-colcon-common-extensions \
    python3-colcon-ros \
    python3-pip \
    python3-rosdep \
    python3-vcstool \
    python3-pydub \
    python3-empy \
    python3-setuptools \
    python3-defusedxml \
    python3-rosinstall-generator \
    python3-rosinstall \
    python3-yaml \
    ros-${ROS_DISTRO}-ros-core \
    ros-${ROS_DISTRO}-message-filters \
    ros-${ROS_DISTRO}-rqt-reconfigure \
    ros-${ROS_DISTRO}-foxglove-bridge \
    ros-${ROS_DISTRO}-rmw-fastrtps-cpp \
    ros-${ROS_DISTRO}-rmw-cyclonedds-cpp \
    libtinyxml2-dev \
    libasio-dev \
    libbullet-dev \
    liblttng-ust-dev \
    libfastcdr-dev \
    libfastrtps-dev \
    && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

COPY ./docker/colcon_build.sh /colcon_build.sh

RUN mkdir -p $TRELLIS_WS

COPY ./docker/rosdep_update.sh /rosdep_update.sh
COPY ./docker/rosdep_install.sh /rosdep_install.sh
COPY ./docker/colcon_build.sh /colcon_build.sh

ENV RMW_IMPLEMENTATION="rmw_fastrtps_cpp"

SHELL ["/bin/bash", "-c"]

#
# Ephemeral stage: Extract package.xml for deps resolution
#
FROM ros-base AS dependencies-stage

# copy trellis_ros package
COPY trellis_ros /src/trellis_ros
COPY ./docker/dependency_snapshot.sh /dependency_snapshot.sh
RUN /dependency_snapshot.sh /src /deps

# TODO: extract package.xmls to copy over in mainline

#
# deps_base
#
FROM ros-base AS deps_base

# Copy the workspace from the ephemeral stage
COPY --from=dependencies-stage /deps $HOME/deps

# install dependencies
RUN /rosdep_update.sh && /rosdep_install.sh $HOME/deps
ENTRYPOINT ["/entrypoint.sh"]

#
# trellis_main
#
FROM deps_base AS trellis_main

COPY ./trellis_ros/trellis_ros $TRELLIS_WS/src/trellis_ros
COPY ./trellis_ros/trellis_msgs $TRELLIS_WS/src/trellis_msgs

RUN source /opt/ros/${ROS_DISTRO}/setup.bash && /colcon_build.sh trellis_ros

COPY ./docker/entrypoint.sh /
COPY ./docker/config/bash_aliases $HOME/.bash_aliases
# Copy DDS configurations
COPY ./docker/config/cyclone-dds.xml /cyclone-dds.xml
COPY ./docker/config/fastdds-config.xml /fastdds-config.xml

ENTRYPOINT ["/entrypoint.sh"]
